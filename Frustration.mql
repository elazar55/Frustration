#property copyright "Copyright 2017, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

// Input variables
extern int    magic_numb    = 1;
extern double min_lots      = 0.01;
extern double max_lots      = 0.01;
extern double steepness      = 10;
extern double offset      = 1;
extern double sl_pips       = 100;
extern double tp_pips       = 100;
extern int    macd_fast     = 12;
extern int    macd_slow     = 26;
extern int    macd_signal   = 9;
extern double macd_levels = 0.0001;
extern int    cci_period    = 10;
extern int cci_levels = 100;
extern int    stoch_k       = 5;
extern int    stoch_s       = 3;
extern int    stoch_d       = 3;
extern int stoch_levels  = 30;
extern int    rsi_period    = 14;
extern int rsi_levels    = 30;

// Internal state variables
bool     buy_trade    = false;
bool     in_trade     = false;
bool     prev_trade   = false;
bool     sell_trade   = false;
datetime prev_time    = 0;
double   order_lots   = 0;
double   order_price  = 0;
double   order_profit = 0;
double   order_sl     = 0;
double   order_tp     = 0;
double   prev_balance = 0;
int      consec       = 1;
int      error        = 0;
int      ticket       = 0;

int OnInit()
{
    UpdateState();
    return(INIT_SUCCEEDED);
}

double Sigmoid(double x)
{
    double in     = (offset - x) * steepness;
    double answer = 1 / (1 + MathExp(in));
    return answer;
}

void OnDeinit(const int reason)
{
    //for (double i = 0; i <= 2; i += 0.1)
    //    Print(DoubleToString(i, 2) + ": " + DoubleToString(Sigmoid(i)));
}

double OnTester()
{
    double TRADES        = TesterStatistics(STAT_TRADES);
    double PROFIT_FACTOR = TesterStatistics(STAT_PROFIT_FACTOR);
    
    double score = Sigmoid(PROFIT_FACTOR) * TRADES;
    return NormalizeDouble(score, 2);
}

void OnTick()
{
    UpdateState();

    // Trade once per candle
    if (prev_time == Time[0]) return;
    prev_time = Time[0];
    
    if (Hour() == 21 || Hour() == 22) return;
    // ---
    
    if (!in_trade)
    {
        // Indicators
        double macdSig = iMACD(NULL, 0, macd_fast, macd_slow, macd_signal, PRICE_CLOSE, MODE_SIGNAL, 1);
        double cci     = iCCI(NULL, 0, cci_period, PRICE_CLOSE, 1);
        double stoch   = iStochastic(NULL, 0, stoch_k, stoch_d, stoch_s, MODE_SMA, STO_LOWHIGH, MODE_SIGNAL, 1);
        double rsi     = iRSI(NULL, 0, rsi_period, PRICE_CLOSE, 1);
        double stoch_max = 50 + stoch_levels;
        double stoch_min = 50 - stoch_levels;
        double rsi_max   = 50 + rsi_levels;
        double rsi_min   = 50 - rsi_levels;
        // ---
    
        // Orders
        if (macdSig >  macd_levels && cci >  cci_levels && stoch >= stoch_max && rsi >= rsi_max) SendOrder(OP_SELL);
        if (macdSig < -macd_levels && cci < -cci_levels && stoch <= stoch_min && rsi <= rsi_min) SendOrder(OP_BUY);
        // ---
    }
}

void UpdateState()
{
    buy_trade    = false;
    sell_trade   = false;
    in_trade     = false;
    error        = 0;
    ticket       = 0;
    order_lots   = 0;
    order_price  = 0;
    order_profit = 0;
    order_sl     = 0;
    order_tp     = 0;

    // Loop through all the orders to find ours
    for (int i = 0; i < OrdersTotal(); i++)
    {
        error = OrderSelect(i, SELECT_BY_POS, MODE_TRADES);

        if (OrderMagicNumber() == magic_numb)
        {
            ticket       = OrderTicket();
            order_lots   = OrderLots();
            order_price  = OrderOpenPrice();
            order_profit = OrderProfit();
            order_sl     = OrderStopLoss();
            order_tp     = OrderTakeProfit();
            in_trade     = true;

            if (OrderType() == OP_BUY)
            {
                buy_trade  = true;
                sell_trade = false;
            }
            if (OrderType() == OP_SELL)
            {
                buy_trade  = false;
                sell_trade = true;
            }
            break;
        }
    }
    RefreshRates();
    // ---

    // Trailing stop
    double min_stoplevel = MarketInfo(NULL, MODE_STOPLEVEL) * Point;
    if (buy_trade)
    {
        if (Bid >= order_price + min_stoplevel)
        {
            double new_sl = NormalizeDouble(Bid - min_stoplevel, Digits);
            double old_sl = NormalizeDouble(order_sl, Digits);

            if (new_sl > old_sl)
                error = OrderModify(ticket, 0, new_sl, order_tp, 0, clrGreenYellow);
        }
    }
    if (sell_trade)
    {
        if (Ask <= order_price - min_stoplevel)
        {
            double new_sl = NormalizeDouble(Ask + min_stoplevel, Digits);
            double old_sl = NormalizeDouble(order_sl, Digits);

            if (new_sl < old_sl)
                error = OrderModify(ticket, 0, new_sl, order_tp, 0, clrGreenYellow);
        }
    }
    // ---


    // Count trades ended in profit
    if (!in_trade && prev_trade)
    {
             if (AccountBalance() >  prev_balance) consec++;
        else if (AccountBalance() <= prev_balance) consec = 1;
    }
    prev_trade   = in_trade;
    prev_balance = AccountBalance();
    // ---

    // Print state variables
    if (IsOptimization()) return;

    datetime time   = TimeCurrent() - Time[0];
    Comment(
           "Consecutive: " + IntegerToString(consec)      + " - " +
           "Profit: "      + DoubleToStr(order_profit, 2) + " - " +
           "In Trade: "    + DoubleToStr(in_trade, 0)     + " - " +
           "Time: "        + IntegerToString(time)
           );
    // ---
}

void SendOrder(int OP_TYPE)
{
    int slip       = 1;
    string comment = "Magic Number: " + IntegerToString(magic_numb);
    in_trade       = true;
    double lots    = min_lots * consec;
    if (lots > max_lots) lots = max_lots;

    RefreshRates();

    if (OP_TYPE == OP_SELL)
    {
        sell_trade = true;
        buy_trade  = false;

        double take_profit = NormalizeDouble(Bid - tp_pips * Point, Digits);
        double stop_loss   = NormalizeDouble(Ask + sl_pips * Point, Digits);

        error = OrderSend(Symbol(), OP_TYPE, lots, Bid, slip, stop_loss,
                          take_profit, comment, magic_numb, 0, clrRed);
    }
    if (OP_TYPE == OP_BUY)
    {
        sell_trade = false;
        buy_trade  = true;

        double take_profit = NormalizeDouble(Ask + tp_pips * Point, Digits);
        double stop_loss   = NormalizeDouble(Bid - sl_pips * Point, Digits);

        error = OrderSend(Symbol(), OP_TYPE, lots, Ask, slip, stop_loss,
                          take_profit, comment, magic_numb, 0, clrLimeGreen);
    }
}
