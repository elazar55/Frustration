#property copyright "Copyright 2017, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

// Input variables
extern int magic_numb = 0;
extern double lots    = 0.1;
extern double tp_pips = 100;
extern double sl_pips = 100;
extern int stoch_K = 5;
extern int stoch_slow = 3;
extern int stoch_D = 3;
extern int stoch_max = 80;
extern int stoch_min = 20;
extern int cci_period = 14;
extern int cci_max = 100;
extern int cci_min = -100;
extern int macd_fast = 12;
extern int macd_slow = 26;
 extern int macd_signal = 9;

// Internal state variables
bool buy_trade  = false;
bool sell_trade = false;
bool buy_stop   = false;
bool sell_stop  = false;
bool in_trade   = false;
bool prev_trade = false;
double prev_balance = 0;
double price        = 0;
double profit       = 0;
double stoploss     = 0;
double takeprofit   = 0;
int error        = 0;
int points       = 0;
int total_trades = 0;
int ticket  = 0;

int OnInit()
{
    UpdateState();
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason) {}

double OnTester()
{
    if (TesterStatistics(STAT_PROFIT) <= 0)
        return TesterStatistics(STAT_PROFIT);
        
    return points;
}

void OnTick()
{
    UpdateState();

    if (!in_trade)
    {
        double stoch_curr = iStochastic(NULL, 0, stoch_K, stoch_D, stoch_slow, MODE_SMA, 0,MODE_MAIN, 0);
        double stoch_prev = iStochastic(NULL, 0, stoch_K, stoch_D, stoch_slow, MODE_SMA, 0,MODE_MAIN, 1);
        double stoch_sign = iStochastic(NULL, 0, stoch_K, stoch_D, stoch_slow, MODE_SMA, 0,MODE_SIGNAL, 0);
        double stoch_s_pr = iStochastic(NULL, 0, stoch_K, stoch_D, stoch_slow, MODE_SMA, 0,MODE_SIGNAL, 1);
        double cci        = iCCI(NULL, 0, cci_period, PRICE_TYPICAL, 0);
        double macd_sign  = iMACD(NULL, 0, macd_fast, macd_slow, macd_signal, PRICE_TYPICAL, MODE_SIGNAL, 0);

        if (stoch_curr < stoch_min  &&
            stoch_curr > stoch_sign &&
            stoch_prev < stoch_s_pr &&
            cci        < cci_min    &&
            macd_sign  < 0)
                SendOrder(OP_BUYSTOP);

        if (stoch_curr > stoch_max  &&
            stoch_curr < stoch_sign &&
            stoch_prev > stoch_s_pr &&
            cci        > cci_max    &&
            macd_sign  > 0)
                SendOrder(OP_SELLSTOP);
    }
}

void UpdateState()
{
    profit     = 0;
    buy_trade  = false;
    sell_trade = false;
    in_trade   = false;
    buy_stop   = false;
    sell_stop  = false;
    error      = 0;
    price      = 0;
    stoploss   = 0;
    takeprofit = 0;

    // Loop through all the orders to find ours
    for (int i = 0; i < OrdersTotal(); i++) {
        OrderSelect(i, SELECT_BY_POS, MODE_TRADES);

        if (OrderMagicNumber() == magic_numb) {
            profit     = OrderProfit();
            price      = OrderOpenPrice();
            in_trade   = true;
            takeprofit = OrderTakeProfit();
            stoploss   = OrderStopLoss();
            ticket     = OrderTicket();

            if (OrderType() == OP_BUY) {
                buy_trade  = true;
                sell_trade = false;
                buy_stop   = false;
                sell_stop  = false;
            }
            if (OrderType() == OP_SELL) {
                buy_trade  = false;
                sell_trade = true;
                buy_stop   = false;
                sell_stop  = false;
            }
            if (OrderType() == OP_BUYSTOP) {
                buy_trade  = false;
                sell_trade = false;
                buy_stop   = true;
                sell_stop  = false;
            }
            if (OrderType() == OP_SELLSTOP) {
                buy_trade  = false;
                sell_trade = false;
                buy_stop   = false;
                sell_stop  = true;
            }
            break;
        }
    }

    // Trailing orders
    double min_stoplevel = MarketInfo(NULL, MODE_STOPLEVEL) * Point;

    if (sell_stop) {
        double new_price = NormalizeDouble(Bid - min_stoplevel, Digits);

        if (new_price > price)
        {
            double take_profit = new_price - (tp_pips * Point);
            double stop_loss   = new_price + (sl_pips * Point);

            OrderModify(ticket, new_price, stop_loss, take_profit, 0, clrNONE);
        }
    }
    if (buy_stop) {
        double new_price = NormalizeDouble(Ask + min_stoplevel, Digits);

        if (new_price < price)
        {
            double take_profit = new_price + (tp_pips * Point);
            double stop_loss   = new_price - (sl_pips * Point);

            OrderModify(ticket, new_price, stop_loss, take_profit, 0, clrNONE);
        }
    }

    // Trailing stop
    if (buy_trade) {
        if (Bid >= price + min_stoplevel) {
            double new_sl = NormalizeDouble(Bid - min_stoplevel, Digits);

            if (new_sl > stoploss) {
                OrderModify(ticket, 0, new_sl, takeprofit, 0, clrNONE);
            }
        }
    }
    if (sell_trade) {
        if (Ask <= price - min_stoplevel) {
            double new_sl = NormalizeDouble(Ask + min_stoplevel, Digits);

            if (new_sl < stoploss) {
                OrderModify(ticket, 0, new_sl, takeprofit, 0, clrNONE);
            }
        }
    }
    
    // Count trades ended in profit as points for testing
    if (!in_trade && prev_trade)
    {
        /*
        ObjectDelete("Closed trade");
        if (prev_short) ObjectCreate("Closed trade", OBJ_TREND, 0, open_time, price, TimeCurrent(), Ask);
        if (prev_long ) ObjectCreate("Closed trade", OBJ_TREND, 0, open_time, price, TimeCurrent(), Bid);
        ObjectSet("Closed trade", OBJPROP_RAY, false);
        */
        
        total_trades++;
        if (AccountBalance() >= prev_balance) {
            points++;
        }
        if (AccountBalance() < prev_balance) {
            //points--;
        }
    }
    prev_trade   = in_trade;
    
    prev_balance = AccountBalance();

    // Print state variables
    Comment(
           "\nProfit: " + DoubleToStr(profit, 2) + " - " +
           "Trades: "   + DoubleToStr(total_trades, 0)     + " - " +
           "Score: "    + DoubleToStr(points, 0)    + " - " +
           "In Trade: " + DoubleToStr(in_trade, 0)   + " - " +
           "Time: "     + IntegerToString(TimeCurrent() - Time[0])
           );
}

void SendOrder(int OP_TYPE)
{
    int slip          = 100;
    double price_stop = MarketInfo(NULL, MODE_STOPLEVEL) * Point;
    string comment    = "Magic Number: " + IntegerToString(magic_numb);

    if (OP_TYPE == OP_SELLSTOP) {
        buy_stop   = false;
        sell_stop  = true;
        sell_trade = false;
        buy_trade  = false;

        double take_profit = (Bid - price_stop) - (tp_pips * Point);
        double stop_loss   = (Bid - price_stop) + (sl_pips * Point);

        error = OrderSend(Symbol(), OP_TYPE, lots, Bid - price_stop, slip,
                          stop_loss, take_profit, comment, magic_numb, 0,
                          clrNONE);
    }
    if (OP_TYPE == OP_BUYSTOP) {
        buy_stop   = true;
        sell_stop  = false;
        sell_trade = false;
        buy_trade  = false;

        double take_profit = (Ask + price_stop) + (tp_pips * Point);
        double stop_loss   = (Ask + price_stop) - (sl_pips * Point);

        error = OrderSend(Symbol(), OP_TYPE, lots, Ask + price_stop, slip,
                          stop_loss, take_profit, comment, magic_numb, 0,
                          clrNONE);
    }
}
