#property copyright "Copyright 2017, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

// Input variables
extern int    magic_numb      = 1;
extern int    training_target = 100;
extern double min_lots        = 0.01;
extern double max_lots        = 0.01;
extern double tp_pips         = 20;
extern double sl_pips         = 20;
extern int fast_period = 2;
extern int slow_period = 10;
extern double threshhold = 2;
// Internal state variables
bool   buy_trade    = false;
bool   sell_trade   = false;
bool   in_trade     = false;
bool   prev_trade   = false;
double prev_balance = 0;
double price        = 0;
double profit       = 0;
double stoploss     = 0;
double takeprofit   = 0;
int    error        = 0;
int    points       = 0;
int    ticket       = 0;
int    consec       = 1;
datetime prev_time  = 0;

int OnInit()
{
    UpdateState();
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason) {}

double OnTester()
{
    double PROFIT           = TesterStatistics(STAT_PROFIT);
    double TRADES           = TesterStatistics(STAT_TRADES);
    double PROFIT_TRADES    = TesterStatistics(STAT_PROFIT_TRADES);
    double CONPROFIT_TRADES = TesterStatistics(STAT_MAX_CONPROFIT_TRADES);
    
    double confidence = MathSqrt(TRADES) / MathSqrt(training_target);
    if (confidence > 1) confidence = 1;
    
    if (TRADES == 0) return 0;
    return NormalizeDouble((PROFIT_TRADES * 100 / TRADES)  * confidence, 2);
}

void OnTick()
{
    UpdateState();
    
    // Trade once per candle
    if (prev_time == Time[0]) return;
    prev_time = Time[0];

    if (!in_trade)
    {
        // Indicators
        double ma_short = iMA(NULL, 0, fast_period, 0, MODE_SMA, PRICE_CLOSE, 1);
        double ma_long  = iMA(NULL, 0, slow_period, 0, MODE_SMA, PRICE_CLOSE, 1);
        double percent = ((ma_short / ma_long) - 1) * 10000;
        //---
        
        // Orders
        if (percent >  threshhold) SendOrder(OP_SELL);
        if (percent < -threshhold) SendOrder(OP_BUY); 
        //---
    }
}

void UpdateState()
{
    profit     = 0;
    buy_trade  = false;
    sell_trade = false;
    in_trade   = false;
    error      = 0;
    price      = 0;
    stoploss   = 0;
    takeprofit = 0;

    // Loop through all the orders to find ours
    for (int i = 0; i < OrdersTotal(); i++)
    {
        OrderSelect(i, SELECT_BY_POS, MODE_TRADES);

        if (OrderMagicNumber() == magic_numb)
        {
            profit     = OrderProfit();
            price      = OrderOpenPrice();
            in_trade   = true;
            takeprofit = OrderTakeProfit();
            stoploss   = OrderStopLoss();
            ticket     = OrderTicket();

            if (OrderType() == OP_BUY)
            {
                buy_trade  = true;
                sell_trade = false;
            }
            if (OrderType() == OP_SELL)
            {
                buy_trade  = false;
                sell_trade = true;
            }
            break;
        }
    }
    RefreshRates();

    // Count trades ended in profit as points for testing
    if (!in_trade && prev_trade)
    {
        if (AccountBalance() > prev_balance)
        {
            points++;
            consec++;
        } else
        if (AccountBalance() < prev_balance)
        {
            points--;
            consec = 1;
        }
    }
    prev_trade   = in_trade;
    prev_balance = AccountBalance();

    // Print state variables
    double ma_short = iMA(NULL, 0, fast_period, 0, MODE_SMA, PRICE_CLOSE, 0);
    double ma_long  = iMA(NULL, 0, slow_period, 0, MODE_SMA, PRICE_CLOSE, 0);
    double percent = ((ma_short / ma_long) - 1) * 10000;
    
    Comment(
           "\nProfit: "    + DoubleToStr(profit, 2)   + " - " +
           "Consecutive: " + IntegerToString(consec)  + " - " +
           "In Trade: "    + DoubleToStr(in_trade, 0) + " - " +
           "% Diff: "      + DoubleToStr(percent, 3)  + " - " +
           "Time: "        + IntegerToString(TimeCurrent() - Time[0])
           );
}

void SendOrder(int OP_TYPE)
{
    int slip       = 0;
    string comment = "Magic Number: " + IntegerToString(magic_numb);
    double lots    = min_lots * consec;
    in_trade       = true;
    
    if (lots > max_lots) lots = max_lots;

    RefreshRates();
    if (OP_TYPE == OP_SELL)
    {
        sell_trade = true;
        buy_trade  = false;

        double take_profit = NormalizeDouble(Bid - tp_pips * Point, Digits);
        double stop_loss   = NormalizeDouble(Ask + sl_pips * Point, Digits);

        error = OrderSend(Symbol(), OP_TYPE, lots, Bid, slip, stop_loss, take_profit, comment, magic_numb, 0, clrRed);
    }
    if (OP_TYPE == OP_BUY)
    {
        sell_trade = false;
        buy_trade  = true;

        double take_profit = NormalizeDouble(Ask + tp_pips * Point, Digits);
        double stop_loss   = NormalizeDouble(Bid - sl_pips * Point, Digits);

        error = OrderSend(Symbol(), OP_TYPE, lots, Ask, slip, stop_loss, take_profit, comment, magic_numb, 0, clrLimeGreen);
    }
}
